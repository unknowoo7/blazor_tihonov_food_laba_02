@page "/importexcel"
@attribute [Authorize(Roles = "Administrator")]

@rendermode InteractiveServer
@using ClosedXML.Excel
@using laba_02.Databse
@using laba_02.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms;

<PageTitle>Загрузка Excel для импорта данных</PageTitle>

<p>
    <label>
        Укажите файл Excel для импорта:
        <InputFile OnChange="LoadFiles"/>
    </label>
</p>

@if (isLoading)
{
    <p>Uploading...</p>
}
else
{
    <ul>
        <li>Количество импортированных продуктов: @productList.Count()</li>
        <li>Количество импортированных ингредиентов: @IngredientList.Count()</li>
        <li>Количество импортированных блюд: @DishList.Count()</li>
        @if (StartTime != null)
        {
            TimeSpan ts = (EndTime ?? DateTime.Now).Subtract(StartTime ?? DateTime.Now);
            <div>
                Время выполнения: @String.Format("{0:00}:{1:00}", ts.Seconds, ts.Milliseconds / 10);
            </div>
        }
    </ul>
}

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">Ошибка: @ErrorMessage</div>
}

@code {

    [Inject] private IDbContextFactory<ApplicationDbContext> DbFactory { get; set; }

    //ApplicationDbContext context = default!;

    protected override async Task OnInitializedAsync()
    {
    }

    public string ErrorMessage { get; set; } = "";

    DateTime? StartTime;
    DateTime? EndTime;

    public List<Product> productList = new();
    public List<Ingredient> IngredientList = new();
    public List<Dish> DishList = new();

    private bool isLoading;

    string? errworksheet { get; set; } = "";

    int? errindexrow { get; set; } = 0;
    const int MAX_FILESIZE = 5000 * 1024; // 5 MB

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;

        var browserFile = e.File;

        if (browserFile != null)
        {
            try
            {
                using (var fileStream = browserFile.OpenReadStream(MAX_FILESIZE)) //от утечек
                {
                    productList = new();
                    IngredientList = new();
                    DishList = new();

                    var randomFile = Path.GetTempFileName();
                    var extension = Path.GetExtension(browserFile.Name);
                    var targetFilePath = Path.ChangeExtension(randomFile, extension);
                    using (var destinationStream = new FileStream(targetFilePath, FileMode.Create)) //памяти
                    {
                        //не то, чтобы это довольно плохо, просто потом сборщик мусора будет немного грузить сервер.
                        await fileStream.CopyToAsync(destinationStream);
                        StartTime = DateTime.Now;
                        await GetDataTableFromExcelAsync(destinationStream);
                        EndTime = DateTime.Now;
                    }
                }
            }
            catch (Exception exception)
            {
                ErrorMessage = exception.Message;
            }
        }

        isLoading = false;
    }

    public async Task GetDataTableFromExcelAsync(FileStream file)
    {
        using (var context = DbFactory.CreateDbContext())
        {
            using (XLWorkbook workbook = new XLWorkbook(file))
            {
                try
                {
                    foreach (IXLWorksheet worksheet in workbook.Worksheets)
                    {
                        errindexrow = 1;
                        errworksheet = worksheet.Name;
                        if (worksheet.Name == "Products")
                        {
                            foreach (IXLRow row in worksheet.RowsUsed().Skip(1))
                            {
                                errindexrow++;
                                Product product = new Product();
                                var range = worksheet.RangeUsed();
                                var table = range!.AsTable();
                                product.ProductId = int.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "ProductId").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());
                                product.ProductName = row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "ProductName").RangeAddress.FirstAddress.ColumnNumber).Value.ToString();
                                product.UnitOfMeasurement = row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "UnitOfMeasurement").RangeAddress.FirstAddress.ColumnNumber).Value.ToString();

                                productList.Add(product);
                            }
                        }

                        errindexrow = 1;
                        if (worksheet.Name == "Dishes")
                        {
                            foreach (IXLRow row in worksheet.RowsUsed().Skip(1))
                            {
                                errindexrow++;

                                Dish dish = new Dish();
                                var range = worksheet.RangeUsed();
                                var table = range!.AsTable();

                                dish.DishId = int.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "DishId").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());
                                dish.DishType = row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "DishType").RangeAddress.FirstAddress.ColumnNumber).Value.ToString();
                                dish.DishWeight = double.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "DishWeight").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());
                                dish.CookingOrder = row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "CookingOrder").RangeAddress.FirstAddress.ColumnNumber).Value.ToString();
                                dish.Calories = int.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "Calories").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());
                                dish.Carbohydrates = int.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "Carbohydrates").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());

                                DishList.Add(dish);
                            }
                        }

                        errindexrow = 1;
                        if (worksheet.Name == "Ingredients")
                        {
                            foreach (IXLRow row in worksheet.RowsUsed().Skip(1))
                            {
                                errindexrow++;

                                Ingredient ingredient = new Ingredient();
                                var range = worksheet.RangeUsed();
                                var table = range!.AsTable();

                                // ingredient.IngredientId = int.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "IngredientId").RangeAddress.FirstAddress.ColumnNumber).Value.ToString()).ToString();
                                ingredient.IngredientId = int.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "IngredientId").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());
                                ingredient.DishId = int.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "DishId").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());
                                ingredient.ProductId = int.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "ProductId").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());
                                ingredient.ProductVolume = double.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "ProductVolume").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());

                                ingredient.Product = productList.Where(x => x.ProductId == int.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "ProductId").RangeAddress.FirstAddress.ColumnNumber).Value.ToString())).FirstOrDefault()!;
                                ingredient.Dish = DishList.Where(x => x.DishId == int.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "DishId").RangeAddress.FirstAddress.ColumnNumber).Value.ToString())).FirstOrDefault()!;

                                IngredientList.Add(ingredient);
                            }
                        }
                    }


                    errworksheet = "";
                    foreach (var el in productList)
                    {
                        el.ProductId = 0;
                    }

                    foreach (var el in DishList)
                    {
                        el.DishId = 0;
                    }

                    foreach (var el in IngredientList)
                    {
                        el.IngredientId = 0;
                    }

                    using (var tr = context.Database.BeginTransaction())
                    {
                        context.AddRange(productList);
                        context.AddRange(DishList);
                        context.AddRange(IngredientList);

                        await context.SaveChangesAsync();
                        tr.Commit();
                    }
                }
                catch (Exception exception)
                {
                    if (errworksheet != "")
                        ErrorMessage = "Ошибка в импорте в таблице " + errworksheet + ", строка - " + errindexrow.ToString();
                    ErrorMessage = exception.Message;
                }
            }
        }
    }

}