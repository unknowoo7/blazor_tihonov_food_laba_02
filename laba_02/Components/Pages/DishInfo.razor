@page "/dish/{id:int}"
@using laba_02.Services
@inject IJSRuntime JsRuntime
@rendermode InteractiveServer

<PageTitle>@GetDishName()</PageTitle>

<style>
  .edit-row {
    display: none; /* Скрываем строки редактирования по умолчанию */
  }
</style>

<h1>
  @GetDishName()
</h1>

<div class="container mt-5">
  <h2 class="mb-4">Список ингредиентов</h2>
  <table class="table table-striped table-hover">
    <thead class="table-primary">
    <tr>
      <th scope="col">#</th>
      <th scope="col">Название продукта</th>
      <th scope="col">Объём</th>
      <th scope="col">Ед. измерения</th>
      <th scope="col" class="text-center">Действия</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var product in products)
    {
      <tr>
        <th scope="row">@product.ProductId</th>
        <td>@product.ProductName</td>
        <td>@GetProductVolume(product.ProductId)</td>
        <td>@product.UnitOfMeasurement</td>
        <td class="text-center">
          <button class="btn btn-warning btn-sm me-2" onclick="showEditRow(@product.ProductId)">Редактировать</button>
          <button class="btn btn-danger btn-sm" @onclick="() => DeleteProduct(product.ProductId)">Удалить</button>
        </td>
      </tr>
      <tr id="edit-row-@product.ProductId" class="edit-row">
        <td colspan="5">
          <div class="row g-2">
            <div class="col-md-4">
              <InputText @bind-Value="product.ProductName" class="form-control" id="edit-product-name" placeholder="Название продукта"></InputText>
            </div>
            <div class="col-md-3">
              <InputNumber @bind-Value="ingredientVolumeStage" class="form-control" id="edit-volume" placeholder="Объём"></InputNumber>
            </div>
            <div class="col-md-3">
              <InputText @bind-Value="product.UnitOfMeasurement" class="form-control" id="edit-unit" placeholder="Ед. измерения"></InputText>
            </div>
            <div class="col-md-2 text-end">
              <button class="btn btn-success btn-sm" @onclick="() => updateProductAsync(product.ProductId, product.ProductName, product.UnitOfMeasurement)">Сохранить</button>
              <button class="btn btn-secondary btn-sm" onclick="hideEditRow(@product.ProductId)">Отмена</button>
            </div>
          </div>
        </td>
      </tr>
    }
    </tbody>
  </table>
</div>

<!-- Форма добавления нового продукта -->
<h5 class="mt-4">Добавить новый продукт</h5>
<form class="row g-3" @onsubmit="AddProductAsync">
  <div class="col-md-3">
    <label for="productName" class="form-label">Название продукта</label>
    <input type="text" id="productName" class="form-control" @bind="newProduct.ProductName" />
  </div>
  <div class="col-md-3">
    <label for="volume" class="form-label">Объём</label>
    <input type="number" id="volume" class="form-control" @bind="ingredientVolumeStage" />
  </div>
  <div class="col-md-3">
    <label for="unit" class="form-label">Ед. измерения</label>
    <input type="text" id="unit" class="form-control" @bind="newProduct.UnitOfMeasurement" />
  </div>
  <div class="col-md-3 d-flex align-items-end">
    <button type="submit" class="btn btn-success w-100">Добавить</button>
  </div>
</form>

<script>
  function showEditRow(id) {
    document.getElementById(`edit-row-${id}`).style.display = "table-row";
  }

  function hideEditRow(id) {
    document.getElementById(`edit-row-${id}`).style.display = "none";
  }
</script>


@code {
  [Inject] public required IDishService DishService { get; set; }
  [Inject] public required IIngredientService IngredientService { get; set; }

  [Parameter] public int Id { get; set; }
  
  double ingredientVolumeStage = 0;
  Product newProduct = new();
  List<Ingredient> ingredients = new List<Ingredient>();
  List<Product> products = new List<Product>();

  protected override async Task OnInitializedAsync()
  {
    ingredients = await DishService.GetIngredientByDishId(Id);
    products = await DishService.GetProductsByIngredientId(Id);
  }
  
  string GetDishName()
  {
    return DishService.GetDishById(Id).DishType;
  }

  double GetProductVolume(int productId)
  {
    return ingredients.Where(i => i.ProductId == productId).FirstOrDefault().ProductVolume;
  }
  
  async Task AddProductAsync()
  {
    var product = await DishService.SaveProductAsync(Id, newProduct.ProductName, newProduct.UnitOfMeasurement);
    await IngredientService.SaveIngredientAsync(Id, product.ProductId, ingredientVolumeStage);
    await LoadLists();
  }
  
  async Task updateProductAsync(int id, string name, string unit)
  {
    await DishService.UpdateProductAsync(id, name, unit, ingredientVolumeStage);
    await LoadLists();
    await JsRuntime.InvokeVoidAsync("hideEditRow", id);
  }

  async Task DeleteProduct(int productnId)
  {
    await DishService.DeleteProductAndIngredientsAsync(productnId);
    await LoadLists();
  }

  async Task LoadLists()
  {
    products = await DishService.GetProductsByIngredientId(Id);
    ingredients = await DishService.GetIngredientByDishId(Id);
    StateHasChanged();
  }
}
