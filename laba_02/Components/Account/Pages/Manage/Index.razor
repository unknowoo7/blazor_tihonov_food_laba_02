@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using laba_02.Data
@using laba_02.Databse
@using laba_02.Models

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ApplicationDbContext dbContext

<PageTitle>Профиль</PageTitle>

<h3>Профиль</h3>
<StatusMessage/>

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <input type="text" value="@username" class="form-control" placeholder="Please choose your username."
                       disabled/>
                <label for="username" class="form-label">Имя пользователя</label>
            </div>
            <div class="mb-3">
                <label for="surname" class="form-label">Фамилия:</label>
                <InputText id="surname" @bind-Value="Input.Surname" class="form-control"/>
                <ValidationMessage For="() => Input.Surname" class="text-danger"/>
            </div>
            <div class="mb-3">
                <label for="ima" class="form-label">Имя:</label>
                <InputText id="ima" @bind-Value="Input.Ima" class="form-control"/>
                <ValidationMessage For="() => Input.Ima" class="text-danger"/>
            </div>
            <div class="mb-3">
                <label for="secsurname" class="form-label">Отчество:</label>
                <InputText id="secsurname" @bind-Value="Input.SecSurname" class="form-control"/>
                <ValidationMessage For="() => Input.SecSurname" class="text-danger"/>
            </div>
            <div class="mb-3">
                <label for="pol" class="form-label">Пол:</label>
                <InputSelect id="pol" @bind-Value="Input.PolId" class="form-control">
                    @foreach (Pol pol in pols)
                    {
                        <option value="@pol.Id">@pol.NamePol</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Input.PolId" class="text-danger"/>
            </div>
            @* <div class="mb-3"> *@
            @*     <label for="pol" class="form-label">Название класса:</label> *@
            @*     <InputSelect id="pol" @bind-Value="Input.DishId" class="form-control"> *@
            @*         @foreach (Dish dish in Dishes) *@
            @*         { *@
            @*             <option value="@dish.DishId">@dish.DishType</option> *@
            @*         } *@
            @*     </InputSelect> *@
            @*     <ValidationMessage For="() => Input.DishId" class="text-danger"/> *@
            @* </div> *@

            <div class="mb-3">
                <label for="datebirth" class="form-label">Дата рождения:</label>
                <InputDate id="datebirth" @bind-Value="Input.DateBirth" class="form-control"/>
                <ValidationMessage For="() => Input.DateBirth" class="text-danger"/>
            </div>
            <div class="mb-3">
                <label for="phone" class="form-label">Телефон:</label>
                <InputText id="phone" @bind-Value="Input.Phone" class="form-control"/>
                <ValidationMessage For="() => Input.Phone" class="text-danger"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Внести изменения</button>
        </EditForm>
    </div>
</div>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;

    private string? Surname;

    private string? Ima;

    private string? SecSurname;

    private int? PolId;

    // private int? DishId;

    private string? Phone;

    public List<Pol> pols;

    public List<Dish> Dishes;

    public DateTime DateBirth;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Dishes = dbContext.Dishes.OrderBy(d => d.DishType).ToList();

        pols = dbContext.Pols.ToList();

        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);

        Surname = user.Surname;

        Ima = user.Ima;

        SecSurname = user.SecSurname;

        Phone = user.Phone;

        DateBirth = user.DateBirth;

        PolId = user.PolId;

        // DishId = user.DishId;

        Input.Surname ??= Surname;

        Input.Ima ??= Ima;

        Input.SecSurname ??= SecSurname;

        Input.DateBirth = DateBirth;

        Input.Phone ??= Phone;

        Input.PolId ??= PolId;

        // Input.DishId ??= DishId;

        // Input.PhoneNumber ??= phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.Surname != Surname)
        {
            user.Surname = Input.Surname;
            var setSurname = await UserManager.UpdateAsync(user);

            if (!setSurname.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Ошибка: Ошибка обновления фамилии.", HttpContext);
            }
        }

        if (Input.Ima != Ima)
        {
            user.Ima = Input.Ima;
            var setIma = await UserManager.UpdateAsync(user);

            if (!setIma.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Ошибка: Ошибка обновления имени.", HttpContext);
            }
        }

        if (Input.SecSurname != SecSurname)
        {
            user.SecSurname = Input.SecSurname;
            var setSecSurname = await UserManager.UpdateAsync(user);

            if (!setSecSurname.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Ошибка: Ошибка обновления отчества.", HttpContext);
            }
        }

        if (Input.PolId != PolId)
        {
            user.PolId = Input.PolId;
            var setPolId = await UserManager.UpdateAsync(user);

            if (!setPolId.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Ошибка: Ошибка обновления пола.", HttpContext);
            }
        }

        // if (Input.DishId != DishId)
        // {
        //
        //     user.DishId = Input.DishId;
        //     var setDishId = await UserManager.UpdateAsync(user);
        //     
        //     if (!setDishId.Succeeded)
        //     {
        //        RedirectManager.RedirectToCurrentPageWithStatus("Ошибка: Ошибка обновления блюда.", HttpContext);
        //     }
        // }
        if (Input.DateBirth != DateBirth)
        {
            user.DateBirth = Input.DateBirth;
            var setDateBirth = await UserManager.UpdateAsync(user);

            if (!setDateBirth.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Ошибка: Ошибка обновления даты рождения.", HttpContext);
            }
        }

        if (Input.Phone != Phone)
        {
            user.Phone = Input.Phone;
            var setPhone = await UserManager.UpdateAsync(user);

            if (!setPhone.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Ошибка: Ошибка обновления даты рождения.", HttpContext);
            }
        }

        @* if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
            }
        } *@

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }

        [Required]
        [Display(Name = "Фамилия")]
        [StringLength(100, ErrorMessage = "{0} должно быть не меньше {2} и не больше {1} символов.", MinimumLength = 3)]
        public string? Surname { get; set; }

        [Required]
        [Display(Name = "Имя")]
        [StringLength(100, ErrorMessage = "{0} должно быть не меньше {2} и не больше {1} символов.", MinimumLength = 3)]
        public string? Ima { get; set; }

        [Display(Name = "Отчество")] public string? SecSurname { get; set; }

        [Required] [Display(Name = "Пол")] public int? PolId { get; set; }

        // [Required] [Display(Name = "Блюдо")] public int? DishId { get; set; }

        [Required]
        [Display(Name = "Дата рождения")]

        public DateTime DateBirth { get; set; }

        [Required] [Display(Name = "Телефон")] public string? Phone { get; set; }
    }

}
